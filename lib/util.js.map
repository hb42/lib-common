{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":";;AAUa,QAAA,UAAU,GAAG,CAAC,MAAc,EAAE,GAAa,EAAE,KAAe,EAAU,EAAE;IACnF,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3B,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;QACxF,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAClG,IAAI,GAAG,IAAI,KAAK,EAAE;QAChB,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/C;IACD,IAAI,KAAK,EAAE;QACT,GAAG,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACrD;IACD,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAaW,QAAA,UAAU,GAAG,CAAC,IAAY,EAAU,EAAE;IACjD,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;AAC/F,CAAC,CAAC","sourcesContent":["/**\n * Millisekunden in Datum/Zeit-String konvertieren\n *\n * Format: DD.MM.YYYY HH:mm[:SS[.mil]]\n * Millis folgen der ueblichen Logik, z.B. new Date().value.\n *\n * @param millis - number: Millisekunden, die umgerechndet werden\n * @param sec - boolean: Sekunden mit ausgeben\n * @param milli - boolean: Millisekunden ausgeben\n */\nexport const dateString = (millis: number, sec?: boolean, milli?: boolean): string => {\n  const d = new Date(millis);\n  let str = (\"0\" + d.getDate()).slice(-2) + \".\" + (\"0\" + (d.getMonth() + 1)).slice(-2) + \".\" +\n    d.getFullYear() + \" \" + (\"0\" + d.getHours()).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2);\n  if (sec || milli) {\n    str += \":\" + (\"0\" + d.getSeconds()).slice(-2);\n  }\n  if (milli) {\n    str += \".\" + (\"00\" + d.getMilliseconds()).slice(-3);\n  }\n  return str;\n};\n\n/**\n * Server-Adresse fuer Server Sent Events (SSE)\n *\n * Die Adresse soll zur Unterscheidung von anderen REST-APIs immer\n * mit /sse/ beginnen. Dies wird hier sichergestellt.\n *\n * Sowohl im Server, als auch im Client wird die Adresse mit\n * z.B. makeSseUrl(AppName) erzeugt => /sse/AppName\n *\n * @param addr\n */\nexport const makeSseUrl = (addr: string): string => {\n  return addr.startsWith(\"/sse/\") ? addr : \"/sse\" + (addr.startsWith(\"/\") ? addr : \"/\" + addr);\n};\n"]}